{"version":3,"sources":["serviceWorker.ts","components/MessageInput.tsx","utils/getBotResponse.ts","utils/shouldScrollToBottom.ts","state/reducer.ts","state/actionTypes.ts","state/actions.ts","state/index.ts","components/App.tsx","index.tsx","assets/send.svg","assets/send-accent.svg","assets/beef-bot.jpg"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","MessageInput","props","value","onChange","onSubmit","disabled","event","preventDefault","className","currentTarget","placeholder","type","src","send","sendAccent","alt","chance","Chance","getBotResponse","text","lowerCaseMessage","toLower","category","pickone","includes","get","oneliners","shouldScrollToBottom","scrollHeight","scrollTop","offsetHeight","scrollOffset","position","reducer","action","typing","payload","messages","union","typingSet","messageAdd","initialState","body","bot","createdAt","Date","App","useReducer","dispatch","useState","setBody","messagesRef","useRef","useLayoutEffect","actions","setTimeout","useEffect","current","beefBot","ref","map","message","index","classNames","right","key","format","response","length","rootElement","document","getElementById","app","StrictMode","hasChildNodes","hydrate","render","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.29e3870a.chunk.js","sourcesContent":["/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FormEvent } from 'react';\n\nimport send from '../assets/send.svg';\nimport sendAccent from '../assets/send-accent.svg';\nimport '../css/MessageInput.css';\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n  onSubmit: () => void;\n};\n\nconst MessageInput = (props: Props) => {\n  const { value, onChange, onSubmit } = props;\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    onSubmit();\n  };\n\n  const disabled = !value;\n\n  return (\n    <form onSubmit={handleSubmit} className=\"message-input\">\n      <input\n        value={value}\n        onChange={(event) => onChange(event.currentTarget.value)}\n        placeholder=\"Type een bericht...\"\n      />\n      <button type=\"submit\" disabled={disabled}>\n        <img src={disabled ? send : sendAccent} alt=\"send\" />\n      </button>\n    </form>\n  );\n};\n\nexport default MessageInput;\n","import Chance from 'chance';\nimport toLower from 'lodash/toLower';\nimport includes from 'lodash/includes';\nimport get from 'lodash/get';\n\nimport oneliners from '../oneliners.json';\n\nconst chance = new Chance();\n\nconst getBotResponse = (text: string): string => {\n  const lowerCaseMessage = toLower(text);\n\n  let category = chance.pickone(['filthy', 'life-lessons', 'quotes']);\n\n  if (\n    includes(lowerCaseMessage, 'vunzig')\n    || includes(lowerCaseMessage, 'vies')\n    || includes(lowerCaseMessage, 'goor')\n  ) {\n    category = 'filthy';\n  }\n\n  if (\n    includes(lowerCaseMessage, 'uitspraak')\n    || includes(lowerCaseMessage, 'quote')\n    || includes(lowerCaseMessage, 'citaat')\n  ) {\n    category = 'quotes';\n  }\n\n  if (\n    includes(lowerCaseMessage, 'advies') ||\n    includes(lowerCaseMessage, 'les') ||\n    includes(lowerCaseMessage, 'raad')\n  ) {\n    category = 'life-lessons';\n  }\n\n  return chance.pickone(get(oneliners, category));\n};\n\nexport default getBotResponse;\n","const shouldScrollToBottom = (\n  scrollHeight: number,\n  scrollTop: number,\n  offsetHeight: number,\n  scrollOffset = 100,\n): boolean => {\n  const position = scrollHeight - (scrollTop + offsetHeight);\n\n  return position < scrollOffset;\n};\n\nexport default shouldScrollToBottom;\n","import union from 'lodash/union';\n\nimport * as actionTypes from './actionTypes';\nimport { StateType, ActionTypes } from './types';\n\nconst reducer = (state: StateType, action: ActionTypes) => {\n  switch (action.type) {\n    case actionTypes.TYPING_SET:\n      return {\n        ...state,\n        typing: action.payload,\n      };\n    case actionTypes.MESSAGE_ADD:\n      return {\n        ...state,\n        messages: union(state.messages, [action.payload]),\n      };\n    default: return state;\n  }\n};\n\nexport default reducer;\n","const TYPING_SET = 'TYPING_SET';\nconst MESSAGE_ADD = 'MESSAGE_ADD';\n\nexport {\n  TYPING_SET,\n  MESSAGE_ADD,\n};\n","import * as actionTypes from './actionTypes';\n\nimport { MessageType, MessageAddActionType, TypingSetActionType } from './types';\n\nconst typingSet = (payload: boolean): TypingSetActionType => ({\n  type: actionTypes.TYPING_SET,\n  payload,\n});\n\nconst messageAdd = (payload: MessageType): MessageAddActionType => ({\n  type: actionTypes.MESSAGE_ADD,\n  payload,\n});\n\nexport {\n  typingSet,\n  messageAdd,\n};\n","import reducer from './reducer';\nimport * as actionTypes from './actionTypes';\nimport * as actions from './actions';\n\nimport { StateType } from './types';\n\nconst initialState: StateType = {\n  messages: [\n    {\n      body: 'Hee Dikbil!',\n      bot: true,\n      createdAt: new Date(),\n    },\n  ],\n  typing: false,\n};\n\nexport {\n  actionTypes,\n  actions,\n  initialState,\n};\n\nexport default reducer;\n","import React, {\n  useLayoutEffect,\n  useState,\n  useReducer,\n  useEffect,\n  useRef,\n} from 'react';\nimport map from 'lodash/map';\nimport format from 'date-fns/format';\nimport classNames from 'classnames';\n\nimport MessageInput from './MessageInput';\nimport getBotResponse from '../utils/getBotResponse';\nimport shouldScrollToBottom from '../utils/shouldScrollToBottom';\nimport beefBot from '../assets/beef-bot.jpg';\nimport reducer, { actions, initialState } from '../state';\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [body, setBody] = useState('');\n  const messagesRef = useRef<HTMLElement>(null);\n\n  useLayoutEffect(() => {\n    dispatch(actions.typingSet(true));\n\n    setTimeout(() => {\n      dispatch(actions.messageAdd({\n        body: 'Wat wil je van me horen? Een uitspraak, wat goed advies of iets vunzigs?',\n        bot: true,\n        createdAt: new Date(),\n      }));\n\n      dispatch(actions.typingSet(false));\n    }, 1000);\n  }, [dispatch]);\n\n  const handleSubmit = () => {\n    setBody('');\n\n    dispatch(actions.messageAdd({\n      body,\n      createdAt: new Date(),\n    }));\n\n    const response = getBotResponse(body);\n\n    setTimeout(() => {\n      dispatch(actions.typingSet(true));\n\n      setTimeout(() => {\n        dispatch(actions.typingSet(false));\n\n        dispatch(actions.messageAdd({\n          body: response,\n          bot: true,\n          createdAt: new Date(),\n        }));\n      }, response.length * 25);\n    }, 500);\n  };\n\n  useEffect(() => {\n    if (messagesRef && messagesRef.current) {\n      const { scrollHeight, scrollTop, offsetHeight } = messagesRef.current;\n\n      const shouldScroll = shouldScrollToBottom(scrollHeight, scrollTop, offsetHeight);\n\n      if (shouldScroll) {\n        messagesRef.current.scrollTop = scrollHeight;\n      }\n    }\n  }, [state.messages]);\n\n  return (\n    <main>\n      <section className=\"app\">\n        <header>\n          <img src={beefBot} alt=\"BeefBot\" />\n          <section>\n            <h1>BeefBot</h1>\n            <h2>{state.typing ? 'aan het typen...' : 'online'}</h2>\n          </section>\n        </header>\n        <section className=\"messages\">\n          <section ref={messagesRef}>\n            {map(state.messages, (message, index) => (\n              <section className={classNames('message', { right: !message.bot })} key={index}>\n                <p>\n                  <span>{message.body}</span>\n                  <span>{format(message.createdAt, 'HH:mm')}</span>\n                </p>\n              </section>\n            ))}\n          </section>\n        </section>\n        <MessageInput\n          value={body}\n          onChange={setBody}\n          onSubmit={handleSubmit}\n        />\n      </section>\n    </main>\n  );\n};\n\nexport default App;\n","/* eslint react/jsx-filename-extension: [0] */\nimport React from 'react';\nimport { hydrate, render } from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport './css/MeyerReset.css';\nimport './css/index.css';\n\nconst rootElement = document.getElementById('root');\n\nconst app = (\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(app, rootElement);\n} else {\n  render(app, rootElement);\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://create-react-app.dev/docs/making-a-progressive-web-app/\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/send.56bc1a62.svg\";","module.exports = __webpack_public_path__ + \"static/media/send-accent.5a1593c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/beef-bot.f58e467b.jpg\";"],"sourceRoot":""}